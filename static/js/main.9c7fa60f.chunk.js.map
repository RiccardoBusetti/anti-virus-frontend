{"version":3,"sources":["components/images/logo.png","components/Styles.js","components/common/SideBar.js","components/common/Map.js","components/common/StatusCard.js","components/common/TopBar.js","components/overview/Overview.js","constants/constants.js","components/common/InformationCard.js","components/common/Chart.js","components/common/Indicator.js","components/patient/Patient.js","components/common/PatientsTable.js","components/patientsList/PatientsList.js","components/settings/Settings.js","components/home/Home.js","redux/actions/index.js","redux/constants/action-types.js","components/login/Login.js","components/App.js","serviceWorker.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","makeStyles","theme","root","display","mainContainer","backgroundColor","toolbar","mixins","content","flexGrow","palette","background","default","padding","spacing","rowContainer","marginBottom","topBarTitle","color","topBarTitleIcon","lineHeight","mapContainer","height","width","drawer","flexShrink","drawerPaper","menuIcon","listItem","activeMenuLabel","activeMenuIcon","activeListItem","statusCard","statusCardValue","fontSize","fontWeight","statusCardValueWhite","statusCardLow","statusCardMedium","statusCardHigh","statusCardCritical","informationCardName","informationCardDetail","loginField","loginContainer","loginTitle","marinBottom","patientGrid","textAlign","text","secondary","patientText","primary","graphAndMap","SideBar","props","styles","useStyles","menuItems","label","link","path","icon","pathname","useLocation","Drawer","className","variant","classes","paper","anchor","Divider","List","map","item","index","MenuLink","key","to","isActive","history","useHistory","style","textDecoration","ListItem","button","onClick","push","ListItemIcon","ListItemText","Map","compose","withProps","googleMapURL","loadingElement","containerElement","mapElement","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","defaultLat","lng","defaultLon","undefined","markers","marker","position","lon","onMarkerClick","id","StatusCard","textClassName","risk","Grid","xs","Card","CardContent","alignItems","Typography","align","title","value","TopBar","AppBar","elevation","Toolbar","IconButton","goBack","noWrap","GET_PATIENTS_OF_DOCTOR","gql","GET_PATIENTS_OF_HOSPITAL","filterByRisk","data","riskLevel","patient","riskScore","filter","array","indexOf","type","count","length","filteredRisk","reduce","a","b","Overview","basePath","activeRole","isDoctor","useQuery","variables","doctorId","hospitalId","loading","error","message","newData","patientsOfDoctor","patientsOfHospital","boxes","container","direction","justify","box","homeLat","homeLon","InformationCard","Avatar","src","name","birthDate","gender","code","Chart","margin","top","right","bottom","left","dataKey","stroke","strokeDasharray","domain","active","Indicator","Array","isArray","symptom","LinearProgress","GET_PATIENT_BY_ID","Patient","useParams","patientId","parseInt","temperature","tiredness","cough","pain","others","symptomsOfPatient","bodyTemperature","diarrhoea","nasalCongestion","soarThroat","chartData","Date","parseFloat","registrationDate","toLocaleDateString","Deg","reverse","console","log","ArrowBack","CssBaseline","singlePatient","surname","dateOfBirth","fiscalCode","imageUrl","familyMembers","Paper","paddingTop","paddingBottom","riskEvaluation","PatientsTable","useSelector","state","Table","tabTable","aria-label","TableHead","TableRow","TableCell","TableBody","component","scope","document","body","cursor","onMouseEnter","onMouseLeave","Chip","Button","event","alert","PatientsList","useState","patients","setPatients","doctorQuery","hospitalQuery","onCompleted","query","useQueryByActiveRole","Settings","fontStyle","Home","useRouteMatch","setActiveRole","activeRoleId","activeRoleType","GET_DOCTOR_BY_NAME","GET_HOSPITAL_BY_NAME","Login","loginType","setLoginType","setName","password","setPassword","dispatch","useDispatch","useLazyQuery","singleDoctor","getDoctorByName","singleHospital","getHospitalByName","minHeight","minWidth","loginCard","autoComplete","Logo","alt","TextField","InputProps","customFieldStyle","onChange","e","target","required","FormControl","RadioGroup","row","FormControlLabel","control","Radio","marginTop","border","doctorName","hospitalName","App","exact","Boolean","window","location","hostname","match","initialState","rootReducer","action","store","createStore","composeWithDevTools","client","ApolloClient","uri","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9c7fa60f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.77e2e467.png\";","import { makeStyles } from '@material-ui/core/styles';\n\nconst drawerWidth = 240;\n\nexport default makeStyles((theme) => ({\n  // Main Classes:\n  root: {\n    display: 'flex',\n  },\n  mainContainer: {\n    backgroundColor: '#F7F8FC',\n  },\n  toolbar: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3),\n  },\n  rowContainer: {\n    marginBottom: 20,\n  },\n  topBarTitle: {\n    color: 'black',\n  },\n  topBarTitleIcon: {\n    color: 'black',\n    lineHeight: 1,\n  },\n  mapContainer: {\n    height: '50vh',\n    width: '100%',\n  },\n\n  // Side Bar Navigator:\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    background: '#363740',\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    background: '#363740',\n  },\n  menuIcon: {\n    color: '#A4A6B3',\n  },\n  listItem: {\n    color: '#A4A6B3',\n  },\n  activeMenuLabel: {\n    color: '#DDE2FF',\n  },\n  activeMenuIcon: {\n    color: '#DDE2FF',\n  },\n  activeListItem: {\n    backgroundColor: '#9FA2B41A',\n    '&:hover': {\n      backgroundColor: '#9FA2B41A',\n    },\n  },\n\n  // Status Card:\n  statusCard: {\n    height: 110,\n  },\n  statusCardValue: {\n    fontSize: 40,\n    fontWeight: 'normal',\n  },\n  statusCardValueWhite: {\n    fontSize: 40,\n    fontWeight: 'normal',\n    color: 'white',\n  },\n  statusCardLow: {\n    height: 110,\n    background: '#29CC97',\n  },\n  statusCardMedium: {\n    height: 110,\n    background: '#FF8E25',\n  },\n  statusCardHigh: {\n    height: 110,\n    background: '#F12B2C',\n  },\n  statusCardCritical: {\n    height: 110,\n    background: '#6d0202',\n  },\n\n  informationCardName: {\n    fontWeight: 'bold',\n    fontSize: 20,\n    marginBottom: 5,\n  },\n  informationCardDetail: {\n    fontSize: 15,\n  },\n\n  // Login:\n  loginField: {\n    width: '100%',\n    color: '#DDe2ff',\n  },\n  loginContainer: {\n    marginBottom: 15,\n  },\n  loginTitle: {\n    fontSize: 25,\n    marinBottom: 25,\n  },\n\n  // Patient:\n  patientGrid: {\n    height: 110,\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  patientText: {\n    height: 20,\n    padding: theme.spacing(3),\n    textAlign: 'left',\n    color: theme.palette.text.primary,\n  },\n  graphAndMap: {\n    height: 300,\n    padding: theme.spacing(2),\n    textAlign: 'left',\n    color: theme.palette.text.secondary,\n  },\n}));\n","import Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport EqualizerOutlinedIcon from '@material-ui/icons/EqualizerOutlined';\nimport PeopleOutline from '@material-ui/icons/PeopleOutline';\nimport SettingsOutlined from '@material-ui/icons/SettingsOutlined';\nimport React from 'react';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport useStyles from '../Styles';\n\nexport default function SideBar(props) {\n  const styles = useStyles();\n\n  const menuItems = [\n    {\n      label: 'Overview',\n      link: `${props.path}/overview`,\n      icon: <EqualizerOutlinedIcon />,\n    },\n    {\n      label: 'Patients',\n      link: `${props.path}/patientsList`,\n      icon: <PeopleOutline />,\n    },\n  ];\n\n  const { pathname } = useLocation();\n\n  return (\n    <Drawer\n      className={styles.drawer}\n      variant=\"permanent\"\n      classes={{\n        paper: styles.drawerPaper,\n      }}\n      anchor=\"left\"\n    >\n      <div className={styles.toolbar} />\n      <Divider classes={styles.listItem} />\n      <List>\n        {menuItems.map((item, index) => (\n          <MenuLink key={index} to={item.link} label={item.label} icon={item.icon} isActive={pathname === item.link} />\n        ))}\n      </List>\n      <Divider />\n      <List>\n        <MenuLink key={2} to={`${props.path}/settings`} label={\"Settings\"} icon={<SettingsOutlined />} isActive={pathname === `${props.path}/settings`} />\n      </List>\n    </Drawer>\n  );\n}\n\nfunction MenuLink({ to, label, icon, isActive }) {\n  const styles = useStyles();\n\n  const history = useHistory();\n\n  return (\n    <Link to={to} style={{ textDecoration: 'none', color: 'unset' }}>\n      <ListItem\n        button\n        key={label}\n        className={isActive ? styles.activeListItem : styles.listItem}\n        onClick={() => history.push(to)}\n      >\n        <ListItemIcon className={isActive ? styles.activeMenuIcon : styles.menuIcon}>{icon}</ListItemIcon>\n        <ListItemText primary={label} className={isActive ? styles.activeMenuLabel : ''} />\n      </ListItem>\n    </Link>\n  );\n}\n","import React from 'react';\nimport { GoogleMap, Marker, withGoogleMap, withScriptjs } from 'react-google-maps';\nimport { compose, withProps } from 'recompose';\n\nexport const Map = compose(\n  withProps({\n    googleMapURL:\n      'https://maps.googleapis.com/maps/api/js?key=AIzaSyCTPeJ6h7Xj84VCrmyJhlmMfIrZIRcmwyc&v=3.exp&libraries=geometry,drawing,places',\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `100%` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  withScriptjs,\n  withGoogleMap\n)((props) => (\n  <GoogleMap defaultZoom={8} defaultCenter={{ lat: props.defaultLat, lng: props.defaultLon }}>\n    {props.markers !== undefined &&\n      props.markers.map((marker, index) => (\n        <Marker\n          key={index}\n          position={{ lat: marker.lat, lng: marker.lon }}\n          onClick={() => {\n            if (props.onMarkerClick) props.onMarkerClick(marker.id, marker.lat, marker.lon);\n          }}\n        />\n      ))}\n  </GoogleMap>\n));\n","import Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport useStyles from '../Styles';\n\nexport default function StatusCard(props) {\n  const styles = useStyles();\n  let className = '';\n  let textClassName = styles.statusCardValueWhite;\n  let color = { color: 'white' };\n  switch (props.risk) {\n    case 'LOW':\n      className = styles.statusCardLow;\n      break;\n    case 'MEDIUM':\n      className = styles.statusCardMedium;\n      break;\n    case 'HIGH':\n      className = styles.statusCardHigh;\n      break;\n    case 'CRITICAL':\n      className = styles.statusCardCritical;\n      break;\n    default:\n      className = styles.statusCard;\n      textClassName = styles.statusCardValue;\n      color = { color: '#0000008a' };\n      break;\n  }\n  return (\n    <Grid item xs={props.xs}>\n      <Card className={className} variant=\"outlined\">\n        <CardContent alignItems=\"center\">\n          <Typography align=\"center\" style={color}>\n            {props.title}\n          </Typography>\n          <Typography align=\"center\" className={textClassName}>\n            {props.value}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n}\n","import AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport useStyles from '../Styles';\nimport {IconButton} from '@material-ui/core';\nimport {useHistory} from \"react-router\";\n\nexport default function TopBar(props) {\n    const styles = useStyles();\n    let history = useHistory();\n    return (\n        <AppBar\n            elevation={0}\n            style={{background: '#fafafa', width: `calc(100% - ${240}px)`}}\n        >\n            <Toolbar>\n                {props.icon !== undefined && (\n                    <IconButton onClick={() => history.goBack()}>\n                        <Typography className={styles.topBarTitleIcon}>\n                            {props.icon}\n                        </Typography>\n                    </IconButton>\n                )}\n                <Typography variant=\"h6\" noWrap className={styles.topBarTitle}>\n                    {props.title}\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import { useQuery } from '@apollo/react-hooks';\nimport Grid from '@material-ui/core/Grid';\nimport gql from 'graphql-tag';\nimport React from 'react';\nimport { useHistory } from 'react-router';\nimport { DOCTOR_ROLE_TYPE } from '../../constants/constants';\nimport { Map } from '../common/Map';\nimport StatusCard from '../common/StatusCard';\nimport TopBar from '../common/TopBar';\nimport useStyles from '../Styles';\n\nconst GET_PATIENTS_OF_DOCTOR = gql`\n  query patientsOfDoctor($doctorId: Int) {\n    patientsOfDoctor(doctorId: $doctorId) {\n      id\n      fiscalCode\n      name\n      surname\n      dateOfBirth\n      familyMembers\n      homeLat\n      homeLon\n      imageUrl\n      riskScore\n    }\n  }\n`;\n\nconst GET_PATIENTS_OF_HOSPITAL = gql`\n  query patientsOfHospital($hospitalId: Int) {\n    patientsOfHospital(hospitalId: $hospitalId) {\n      id\n      fiscalCode\n      name\n      surname\n      dateOfBirth\n      familyMembers\n      homeLat\n      homeLon\n      imageUrl\n      riskScore\n    }\n  }\n`;\n\nfunction filterByRisk(data, riskLevel) {\n  const mediaTypes = data\n      .map((patient) => patient.riskScore) // get all media types\n      .filter((riskScore, index, array) => array.indexOf(riskScore) === index), // filter out duplicates\n    counts = mediaTypes.map((riskScore) => ({\n      type: riskScore,\n      count: data.filter((item) => item.riskScore === riskScore).length,\n    }));\n  const total = counts.filter((risk) => risk.type === riskLevel).map((filteredRisk) => filteredRisk.count);\n  return total.reduce((a, b) => a + b, 0);\n}\n\nexport default function Overview({ basePath, activeRole }) {\n  const styles = useStyles();\n\n  const history = useHistory();\n\n  const isDoctor = activeRole.type === DOCTOR_ROLE_TYPE;\n\n  const { loading, error, data } = useQuery(isDoctor ? GET_PATIENTS_OF_DOCTOR : GET_PATIENTS_OF_HOSPITAL, {\n    variables: {\n      doctorId: isDoctor ? activeRole.id : undefined,\n      hospitalId: !isDoctor ? activeRole.id : undefined,\n    },\n  });\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  const newData = isDoctor ? data.patientsOfDoctor : data.patientsOfHospital;\n\n  const boxes = [\n    {\n      title: 'Total Patients',\n      value: newData.length,\n      risk: '',\n    },\n    {\n      title: 'Serious Patients',\n      value: filterByRisk(newData, 'HIGH') + filterByRisk(newData, 'CRITICAL'),\n      risk: 'HIGH',\n    },\n\n    {\n      title: 'Low Risk Patients',\n      value: filterByRisk(newData, 'LOW'),\n      risk: 'LOW',\n    },\n  ];\n  return (\n    <>\n      <TopBar title={'Overview ' + activeRole.type} />\n      <main className={styles.content}>\n        <div className={styles.toolbar} />\n        <div className={styles.rowContainer}>\n          <Grid container className={styles.root} direction=\"row\" spacing={3} justify=\"space-between\">\n            {boxes.map((box, index) => (\n              <StatusCard risk={box.risk} key={index} title={box.title} value={box.value} xs={12 / boxes.length} />\n            ))}\n          </Grid>\n        </div>\n        <div style={{ marginBottom: 20 }} className={styles.mapContainer}>\n          <Map\n            defaultLat={newData !== undefined && newData.length > 0 ? newData[0].homeLat : 0}\n            defaultLon={newData !== undefined && newData.length > 0 ? newData[0].homeLon : 0}\n            markers={newData.map((patient) => ({\n              id: patient.id,\n              lat: patient.homeLat,\n              lon: patient.homeLon,\n            }))}\n            onMarkerClick={(id, lat, lon) => history.push(`${basePath}/patient/${id}`)}\n          />\n        </div>\n      </main>\n    </>\n  );\n}\n","export const DOCTOR_ROLE_TYPE = 'doctor';\nexport const HOSPITAL_ROLE_TYPE = 'hospital';\n","import Avatar from '@material-ui/core/Avatar';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport useStyles from '../Styles';\n\nexport default function InformationCard(props) {\n  const styles = useStyles();\n\n  return (\n    <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" item xs={3} spacing={2}>\n      <Grid item xs={4}>\n        <Avatar src={props.src} style={{ width: 100, height: 100 }} />\n      </Grid>\n      <Grid item xs={8}>\n        <Typography align=\"left\" color=\"textPrimary\" className={styles.informationCardName}>\n          {props.name}\n        </Typography>\n        <Typography align=\"left\" className={styles.informationCardDetail} color=\"textSecondary\">\n          {props.birthDate}\n        </Typography>\n        <Typography align=\"left\" className={styles.informationCardDetail} color=\"textSecondary\">\n          {props.gender}\n        </Typography>\n        <Typography align=\"left\" className={styles.informationCardDetail} color=\"textSecondary\">\n          {props.code}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n","import {LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip} from 'recharts';\nimport React from \"react\";\n\n\nexport default function Chart(props) {\n    let data = props.data;\n    return (\n        <LineChart width={600} height={260} data={data} margin={{top: 5, right: 5, bottom: 5, left: 0}}>\n            <Line type=\"monotone\" dataKey=\"Deg\" stroke=\"#8884d8\"/>\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\"/>\n            <XAxis dataKey=\"name\"/>\n            <YAxis type=\"number\" domain={['dataMin - 1', 'dataMax']} />\n            <Tooltip active={true} />\n        </LineChart>\n    );\n}\n\n\n","import Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport React from \"react\";\n\nexport default function Indicator(props) {\n    return (\n        <Grid item container>\n            <Grid item xs={3}>\n                <Typography align={\"left\"}>{props.name}</Typography>\n            </Grid>\n            <Grid container item xs={9} direction=\"column\" align=\"center\" justify=\"space-around\">\n                <Grid item>\n                    {Array.isArray(props.value) ?\n                        (props.value.map((symptom) => symptom.value &&\n                            <Typography align={\"left\"}>{\"• \" + symptom.name}</Typography>))\n                        :\n                        (\n                            <LinearProgress variant=\"determinate\" value={props.value}/>)}\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\n","import { useQuery } from '@apollo/react-hooks';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { ArrowBack } from '@material-ui/icons';\nimport gql from 'graphql-tag';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport InformationCard from '../common/InformationCard';\nimport { Map } from '../common/Map';\nimport StatusCard from '../common/StatusCard';\nimport TopBar from '../common/TopBar';\nimport useStyles from '../Styles';\nimport Chart from '../common/Chart';\nimport Indicator from '../common/Indicator';\n\nconst GET_PATIENT_BY_ID = gql`\n  query($patientId: Int!) {\n    singlePatient(patientId: $patientId) {\n      fiscalCode\n      name\n      surname\n      dateOfBirth\n      familyMembers\n      homeLat\n      homeLon\n      imageUrl\n      riskScore\n    }\n    symptomsOfPatient(patientId: $patientId) {\n      bodyTemperature\n      registrationDate\n      tiredness\n      cough\n      pain\n      nasalCongestion\n      soarThroat\n      diarrhoea\n    }\n  }\n`;\n\nexport default function Patient() {\n  const classes = useStyles();\n\n  const { id } = useParams();\n\n  const { loading, error, data } = useQuery(GET_PATIENT_BY_ID, {\n    variables: {\n      patientId: parseInt(id),\n    },\n  });\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  let temperature = 'N/A';\n  let tiredness = 'N/A';\n  let cough = 'N/A';\n  let pain = 'N/A';\n\n  let others = [\n    {\n      name: 'Diarrhoea',\n      value: 'N/A',\n    },\n    {\n      name: 'Nasal Congestion',\n      value: 'N/A',\n    },\n    {\n      name: 'Soar Throat',\n      value: 'N/A',\n    },\n  ];\n  if (data.symptomsOfPatient[0] !== undefined) {\n    temperature = data.symptomsOfPatient[0].bodyTemperature;\n    tiredness = data.symptomsOfPatient[0].tiredness;\n    cough = data.symptomsOfPatient[0].cough;\n    pain = data.symptomsOfPatient[0].pain;\n    others[0].value = data.symptomsOfPatient[0].diarrhoea;\n    others[1].value = data.symptomsOfPatient[0].nasalCongestion;\n    others[2].value = data.symptomsOfPatient[0].soarThroat;\n  }\n\n  const chartData = data.symptomsOfPatient\n    .map((symptom) => ({\n      name: new Date(parseFloat(symptom.registrationDate)).toLocaleDateString(),\n      Deg: symptom.bodyTemperature,\n    }))\n    .reverse();\n\n  console.log(data.symptomsOfPatient);\n\n  return (\n    <div className={classes.root}>\n      <TopBar title=\"Patient Information\" icon={<ArrowBack />} />\n      <CssBaseline />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <div>\n          <Grid container spacing={3}>\n            <InformationCard\n              name={data.singlePatient.name + ' ' + data.singlePatient.surname}\n              birthDate={new Date(parseFloat(data.singlePatient.dateOfBirth)).toLocaleDateString()}\n              gender={' '}\n              code={data.singlePatient.fiscalCode}\n              src={data.singlePatient.imageUrl}\n            />\n\n            <StatusCard\n              risk={data.singlePatient.riskScore}\n              value={data.singlePatient.riskScore !== null ? data.singlePatient.riskScore : 'N/A'}\n              title={'Estimated Risk'}\n              xs={3}\n            />\n            <StatusCard value={temperature + '°C'} title={'Fever'} xs={3} />\n            <StatusCard value={data.singlePatient.familyMembers} title={'Family Members'} xs={3} />\n\n            <Grid item container xs={6} spacing={2}>\n              <Grid item xs={12}>\n                <Typography className={classes.topBarTitle} variant=\"h6\" elevation={0}>\n                  Fever History\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <Paper className={classes.graphAndMap} elevation={0} variant=\"outlined\">\n                  <Chart data={chartData} />\n                </Paper>\n              </Grid>\n            </Grid>\n\n            <Grid item container xs={6} spacing={2}>\n              <Grid item xs={12}>\n                <Typography className={classes.topBarTitle} variant=\"h6\" elevation={0}>\n                  Home Location\n                </Typography>\n              </Grid>\n              <Grid item xs={12} style={{ height: 300, paddingTop: 0, paddingBottom: 0 }}>\n                <div style={{ marginBottom: 20, height: '100%' }}>\n                  <Map\n                    defaultLat={data !== undefined ? data.singlePatient.homeLat : 0}\n                    defaultLon={data !== undefined ? data.singlePatient.homeLon : 0}\n                    markers={[\n                      {\n                        id: data.singlePatient.id,\n                        lat: data.singlePatient.homeLat,\n                        lon: data.singlePatient.homeLon,\n                      },\n                    ]}\n                    style={{ height: '100%' }}\n                  />\n                </div>\n              </Grid>\n            </Grid>\n\n            <Grid item container xs={6} spacing={2}>\n              <Grid item xs={12}>\n                <Typography className={classes.topBarTitle} variant=\"h6\" elevation={0}>\n                  Medical Information\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <Paper className={classes.graphAndMap} elevation={0} variant=\"outlined\">\n                  <Grid container align=\"center\" justify=\"center\" direction=\"row\" spacing={3}>\n                    <Indicator name=\"Tiredness\" value={(tiredness * 100) / 5.0} />\n                    <Indicator name=\"Cough\" value={(cough * 100) / 5.0} />\n                    <Indicator name=\"Pain\" value={(pain * 100) / 5.0} />\n                    <Indicator name=\"Others\" value={others} />\n                  </Grid>\n                </Paper>\n              </Grid>\n            </Grid>\n\n            <Grid item container xs={6} spacing={2}>\n              <Grid item xs={12}>\n                <Typography className={classes.topBarTitle} variant=\"h6\" elevation={0}>\n                  Chat\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography align=\"center\">\n                  {' '}\n                  The live chat will be deployed in a future release! Please, stay tuned!\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </div>\n      </main>\n    </div>\n  );\n}\n","import { Avatar, Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { DOCTOR_ROLE_TYPE } from '../../constants/constants';\nimport useStyles from '../Styles';\n\nfunction riskEvaluation(risk) {\n  let color = '#3f51b5';\n  switch (risk) {\n    case 'LOW':\n      color = '#29CC97';\n      break;\n    case 'MEDIUM':\n      color = '#FF8E25';\n      break;\n    case 'HIGH':\n      color = '#F12B2C';\n      break;\n    case 'CRITICAL':\n      color = '#6d0202';\n      break;\n    default:\n      color = '#bdbdbd';\n      break;\n  }\n  return color;\n}\n\nexport default function PatientsTable({ data, basePath }) {\n  const classes = useStyles();\n  const activeRole = useSelector((state) => state.activeRole);\n  const isDoctor = activeRole.type === DOCTOR_ROLE_TYPE;\n  const history = useHistory();\n\n  return (\n    <Paper variant={'outlined'} elevation={0}>\n      <Table className={classes.tabTable} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Name and surname</TableCell>\n            <TableCell>Gravity estimation</TableCell>\n            {isDoctor && <TableCell>Emergency</TableCell>}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data !== undefined &&\n            data.map((patient) => (\n              <TableRow key={patient.id}>\n                <TableCell\n                  component=\"th\"\n                  scope=\"row\"\n                  onClick={() => {\n                    history.push(`${basePath}/patient/${patient.id}`, (document.body.style.cursor = 'default'));\n                  }}\n                  onMouseEnter={() => {\n                    document.body.style.cursor = 'pointer';\n                  }}\n                  onMouseLeave={() => {\n                    document.body.style.cursor = 'default';\n                  }}\n                >\n                  <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={2}>\n                    <Grid item>\n                      <Avatar src={patient.imageUrl} />\n                    </Grid>\n                    <Grid item>\n                      <Typography>{`${patient.name} ${patient.surname}`}</Typography>\n                    </Grid>\n                  </Grid>\n                </TableCell>\n                <TableCell>\n                  <Chip\n                    label={patient.riskScore != null ? patient.riskScore : 'N/A'}\n                    style={{\n                      background: riskEvaluation(patient.riskScore),\n                      color: 'white',\n                      fontWeight: 'bold',\n                    }}\n                  />\n                </TableCell>\n                {isDoctor && (\n                  <TableCell>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"primary\"\n                      onClick={(event) => alert(patient.name + ' ' + patient.surname + ' will be sent to Hospital!')}\n                    >\n                      Send to Hospital\n                    </Button>\n                  </TableCell>\n                )}\n              </TableRow>\n            ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n","import { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { DOCTOR_ROLE_TYPE } from '../../constants/constants';\nimport PatientsTable from '../common/PatientsTable';\nimport TopBar from '../common/TopBar';\nimport useStyles from '../Styles';\n\nconst GET_PATIENTS_OF_DOCTOR = gql`\n  query patientsOfDoctor($doctorId: Int) {\n    patientsOfDoctor(doctorId: $doctorId) {\n      id\n      fiscalCode\n      name\n      surname\n      dateOfBirth\n      familyMembers\n      homeLat\n      homeLon\n      imageUrl\n      riskScore\n    }\n  }\n`;\n\nconst GET_PATIENTS_OF_HOSPITAL = gql`\n  query patientsOfHospital($hospitalId: Int) {\n    patientsOfHospital(hospitalId: $hospitalId) {\n      id\n      fiscalCode\n      name\n      surname\n      dateOfBirth\n      familyMembers\n      homeLat\n      homeLon\n      imageUrl\n      riskScore\n    }\n  }\n`;\n\nfunction useQueryByActiveRole(doctorQuery, hospitalQuery, onCompleted) {\n  const activeRole = useSelector((state) => state.activeRole);\n  const isDoctor = activeRole.type === DOCTOR_ROLE_TYPE;\n\n  useQuery(isDoctor ? doctorQuery.query : hospitalQuery.query, {\n    onCompleted: (data) => {\n      onCompleted(isDoctor ? data.patientsOfDoctor : data.patientsOfHospital);\n    },\n    variables: {\n      doctorId: isDoctor ? activeRole.id : undefined,\n      hospitalId: !isDoctor ? activeRole.id : undefined,\n    },\n  });\n}\n\nexport default function PatientsList(props) {\n  const styles = useStyles();\n\n  const [patients, setPatients] = useState([]);\n\n  useQueryByActiveRole(\n    {\n      query: GET_PATIENTS_OF_DOCTOR,\n    },\n    {\n      query: GET_PATIENTS_OF_HOSPITAL,\n    },\n    (patients) => {\n      setPatients(patients);\n    }\n  );\n\n  return (\n    <>\n      <TopBar title={'Patients List ' + props.activeRole.type} />\n      <main className={styles.content}>\n        <div className={styles.toolbar} />\n        <PatientsTable {...props} data={patients} />\n      </main>\n    </>\n  );\n}\n","import React from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport TopBar from \"../common/TopBar\";\nimport useStyles from '../Styles';\n\nexport default function Settings() {\n    const styles = useStyles();\n\n    return (\n        <>\n            <TopBar title={'Settings '}/>\n            <main className={styles.content}>\n                <div className={styles.toolbar}/>\n                <Typography style={{marginBottom: 50}}>[The settings section will be implemented in the future]</Typography>\n                <Typography style={{fontStyle: \"italic\"}}>Thank you for trying the demo of our software! We hope you enjoyed it!</Typography>\n                <Typography style={{fontStyle: \"italic\"}}>#EUvsVirus#staySafe</Typography>\n            </main>\n        </>\n\n)\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Switch, useRouteMatch } from 'react-router';\nimport { Route } from 'react-router-dom';\nimport SideBar from '../common/SideBar';\nimport Overview from '../overview/Overview';\nimport Patient from '../patient/Patient';\nimport PatientsList from '../patientsList/PatientsList';\nimport useStyles from '../Styles';\nimport Settings from \"../settings/Settings\";\n\nexport default function Home() {\n  const styles = useStyles();\n\n  const activeRole = useSelector((state) => state.activeRole);\n\n  const { path } = useRouteMatch();\n\n  return (\n    <div className={styles.root}>\n      <SideBar path={path} />\n      <Switch>\n        <Route path={`${path}/overview`}>\n          <Overview basePath={path} activeRole={activeRole} />\n        </Route>\n        <Route path={`${path}/patientsList`}>\n          <PatientsList basePath={path} activeRole={activeRole} />\n        </Route>\n        <Route path={`${path}/patient/:id`}>\n          <Patient />\n        </Route>\n        <Route path={`${path}/settings`}>\n          <Settings />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","import { SET_ACTIVE_ROLE_ACTION_TYPE } from '../constants/action-types';\n\nexport function setActiveRole(activeRoleId, activeRoleType) {\n  return { type: SET_ACTIVE_ROLE_ACTION_TYPE, activeRoleId, activeRoleType };\n}\n","export const SET_ACTIVE_ROLE_ACTION_TYPE = 'SET_ACTIVE_ROLE_ACTION_TYPE';","import {useLazyQuery} from '@apollo/react-hooks';\nimport {Card, CardContent, Typography} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport TextField from '@material-ui/core/TextField';\nimport gql from 'graphql-tag';\nimport React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useHistory} from 'react-router';\nimport {DOCTOR_ROLE_TYPE, HOSPITAL_ROLE_TYPE} from '../../constants/constants';\nimport {setActiveRole} from '../../redux/actions/index';\nimport Logo from '../images/logo.png';\nimport useStyles from '../Styles';\n\nconst GET_DOCTOR_BY_NAME = gql`\n  query singleDoctor($doctorName: String!) {\n    singleDoctor(doctorName: $doctorName) {\n      id\n    }\n  }\n`;\n\nconst GET_HOSPITAL_BY_NAME = gql`\n  query singleHospital($hospitalName: String!) {\n    singleHospital(hospitalName: $hospitalName) {\n      id\n    }\n  }\n`;\n\n\nfunction Login() {\n    const styles = useStyles();\n\n    const [loginType, setLoginType] = useState(DOCTOR_ROLE_TYPE);\n    const [name, setName] = useState('');\n    const [password, setPassword] = useState('');\n\n    const dispatch = useDispatch();\n\n    const history = useHistory();\n\n    const [getDoctorByName] = useLazyQuery(GET_DOCTOR_BY_NAME, {\n        onCompleted: (data) => {\n            dispatch(setActiveRole(data.singleDoctor.id, DOCTOR_ROLE_TYPE));\n            history.push(`/${DOCTOR_ROLE_TYPE}/overview`);\n        },\n    });\n    const [getHospitalByName] = useLazyQuery(GET_HOSPITAL_BY_NAME, {\n        onCompleted: (data) => {\n            dispatch(setActiveRole(data.singleHospital.id, HOSPITAL_ROLE_TYPE));\n            history.push(`/${HOSPITAL_ROLE_TYPE}/overview`);\n        },\n    });\n\n    return (\n        <main className={styles.content}>\n            <Grid\n                container\n                spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{minHeight: '100vh', minWidth: '100%'}}\n            >\n                <Grid item xs={12} style={{width: '70%'}}>\n                    <Card\n                        align=\"center\"\n                        justify=\"center\"\n                        style={{minWidth: '100%'}}\n                        className={styles.loginCard}\n                        elevation={0}\n                        variant=\"outlined\"\n                    >\n                        <CardContent>\n                            <Typography className={styles.loginTitle}>Welcome! Please login</Typography>\n                            <form autoComplete=\"off\">\n                                <Grid container>\n                                    <Grid item xs={4}>\n                                        <img src={Logo} width=\"60%\" alt=\"logo\"/>\n                                    </Grid>\n                                    <Grid item xs={8}>\n                                        <div className={styles.loginContainer}>\n                                            <TextField\n                                                id=\"username\"\n                                                label=\"Username\"\n                                                className={styles.loginField}\n                                                InputProps={{\n                                                    className: styles.customFieldStyle,\n                                                }}\n                                                value={name}\n                                                onChange={(e) => setName(e.target.value)}\n                                                required={true}\n                                            />\n                                        </div>\n                                        <div className={styles.loginContainer}>\n                                            <TextField\n                                                id=\"password\"\n                                                label=\"Password\"\n                                                type=\"password\"\n                                                className={styles.loginField}\n                                                value={password}\n                                                onChange={(e) => setPassword(e.target.value)}\n\n                                            />\n                                        </div>\n                                        <div className={styles.loginContainer}>\n                                            <FormControl component=\"fieldset\">\n                                                <RadioGroup\n                                                    row\n                                                    aria-label=\"Choose one\"\n                                                    name=\"role_type\"\n                                                    value={loginType}\n                                                    onChange={(event) => setLoginType(event.target.value)}\n                                                >\n                                                    <FormControlLabel value=\"doctor\" control={<Radio/>} label=\"Doctor\"/>\n                                                    <FormControlLabel value=\"hospital\" control={<Radio/>}\n                                                                      label=\"Hospital\"/>\n                                                </RadioGroup>\n                                            </FormControl>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                                <div>\n                                    <Button\n                                        className={styles.loginField}\n                                        style={{marginTop: 15, border: '1px solid rgba(0, 0, 0, 0.12)'}}\n                                        onClick={() => {\n                                            if (loginType === 'doctor') {\n                                                getDoctorByName({\n                                                    variables: {\n                                                        doctorName: name,\n                                                    },\n                                                });\n                                            } else if (loginType === 'hospital') {\n                                                getHospitalByName({\n                                                    variables: {\n                                                        hospitalName: name,\n                                                    },\n                                                });\n                                            }\n                                        }}\n                                    >\n                                        Login\n                                    </Button>\n                                </div>\n                            </form>\n                        </CardContent>\n                    </Card>\n                </Grid>\n            </Grid>\n        </main>\n    );\n}\n\nexport default Login;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport Home from './home/Home';\nimport Login from './login/Login';\n\nfunction App() {\n  const activeRole = useSelector((state) => state.activeRole);\n\n  return (\n    <Switch>\n      <Route exact path=\"/login\">\n        <Login />\n      </Route>\n      {activeRole !== undefined && (\n        <Route path={`/${activeRole.type}`}>\n          <Home />\n        </Route>\n      )}\n      <Route path=\"*\">\n        <Redirect to=\"/login\" />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_ACTIVE_ROLE_ACTION_TYPE } from '../constants/action-types';\n\nconst initialState = {\n  activeRole: undefined\n};\n\nfunction rootReducer(state = initialState, action) {\n    switch (action.type) {\n        case SET_ACTIVE_ROLE_ACTION_TYPE:\n            return {\n                ...state,\n                activeRole: {\n                    id: action.activeRoleId,\n                    type: action.activeRoleType\n                }\n            }\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from '../reducers/index';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst client = new ApolloClient({\n  uri: 'https://anti-virus-backend.herokuapp.com/graphql',\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}